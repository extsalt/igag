generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = "postgresql://postgres:LryqOsc7oSBX4Lcd@db.fycnnpjuqknyekueebgn.supabase.co:5432/postgres"
}

model users {
  id               Int        @id @unique @default(autoincrement())
  username         String?
  email            String
  password         String?
  image            String?
  identityProvider String     @default("credential")
  noOfPostsCreated Int        @default(0)
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  posts            posts[]
  comments         comments[]
}

model posts {
  id                Int        @id @unique @default(autoincrement())
  user              users      @relation(fields: [userId], references: [id])
  userId            Int
  slug              String
  title             String
  imageUrl          String
  likes             Int        @default(0)
  dislikes          Int        @default(0)
  impressionsCount  Int        @default(0)
  postedAnonymously Boolean    @default(false)
  isNSFW            Boolean    @default(false)
  isReported        Boolean    @default(false)
  commentsCount     Int        @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  comments          comments[]
  @@index([id, userId, likes, dislikes, commentsCount])
}

model comments {
  id        Int       @id @unique @default(autoincrement())
  userId    Int
  postId    Int
  body      String
  imageUrl  String
  likes     Int       @default(0)
  dislikes  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  user      users     @relation(fields: [userId], references: [id])
  post      posts     @relation(fields: [postId], references: [id])
}

model tags {
  id        Int       @id @unique @default(autoincrement())
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}
